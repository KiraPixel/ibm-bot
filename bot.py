import discord
from discord.ext import commands
from discord import Member
from discord.ext.commands import has_permissions, MissingPermissions
from discord.utils import get
from config import settings
from mysqlconfig import host, user, password, db_name
from message import messages
import random
from asyncio import sleep
import sqlite3 as sq
from datetime import timedelta, datetime
import mysql.connector
from dislash import InteractionClient, Option, OptionType
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger


intents = discord.Intents.all() #–ø–æ–ª—É—á–∞–º –ø—Ä–∞–≤–∞
bot = commands.Bot(command_prefix = settings['prefix'], intents = intents) #–ø—Ä–æ–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
slash = InteractionClient(bot)




con = mysql.connector.connect(
    host=host,
    user=user,
    password=password,
    database=db_name
)
cur = con.cursor()

async def getuserid(discordId):
    if await getclient(discordId) == False:
        return(0)
    cur.execute(f"SELECT id FROM user WHERE discordId = {discordId}")
    record = cur.fetchall()
    return(record[0][0])


async def defsetmoney(discordId, money):
    cur.execute(f"UPDATE user SET money = {money} WHERE discordId = {discordId}")
    con.commit()


async def createchannel(owner, reaction, category, recipient = 0, money = 0,):
    guild = bot.get_guild(settings['guild'])
    discorowner = guild.get_member(owner)
    cur.execute(f"INSERT INTO tickets(ownerId, type, money, recipient) VALUES({owner.id}, '{category}', {money}, {recipient})")
    con.commit()
    cur.execute("SELECT ticketId FROM tickets ORDER BY ticketId DESC LIMIT 1")
    record = cur.fetchall()
    ticketcategori = bot.get_channel(settings['ticketcategori'])
    bitcategori = bot.get_channel(settings['bitcategori'])
    if category == "bid":
        channel = await guild.create_text_channel(f"bid-{record[0][0]}", category = bitcategori)
        await channel.set_permissions(owner, read_messages=True)
        color = discord.Colour.from_rgb(0, 102, 102)
        embed = discord.Embed(
            title = "–¢–∏–∫–∫–µ—Ç",
            description = f"{owner.mention} –≤—ã —Å–æ–∑–¥–∞–ª–∏ –∑–∞–ø—Ä–æ—Å. –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏.",
            colour = color
        )

        await channel.send(embed=embed)
        return(channel)

    msg = "–ï—Å–ª–∏ –≤—ã –≤–∏–¥–µ—Ç–µ —ç—Ç–æ. –í—ã —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–∏"
    if category == "reg":
        msg = "–≠—Ç–æ –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –±–∞–Ω–∫–∞"
    if category == "alm":
        msg = "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à IBM —Å—á–µ—Ç - –∞–ª–º–∞–∑–∞–º–∏? –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
    if category == "pkr":
        msg = "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–µ–¥–∏—Ç? –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
    if category == "hbk":
        msg = "–í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ –±–∞–Ω–∫—É? –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –í–∞—à –≤–æ–ø—Ä–æ—Å –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –°–≤–æ–±–æ–¥–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è!"
    if category == "hsl":
        msg = "–í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ IMB SALE? –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –í–∞—à –≤–æ–ø—Ä–æ—Å –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –°–≤–æ–±–æ–¥–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è!"
    if category == "nks":
        msg = "–í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–º—É —Å—á–µ—Ç—É? –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –í–∞—à –≤–æ–ø—Ä–æ—Å –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –°–≤–æ–±–æ–¥–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è!"
    channel = await guild.create_text_channel(f"{category}-{record[0][0]}", category = ticketcategori)
    await channel.set_permissions(owner, read_messages=True)

    color = discord.Colour.from_rgb(0, 102, 102)
    embed = discord.Embed(
        title = "–¢–∏–∫–∫–µ—Ç",
        description = f"{owner.mention} {msg}",
        colour = color
    )

    await channel.send(embed=embed)
    return(channel)


async def deletechannel(channel, invterval, delta):
    async def lol():
        await channel.delete()
    date_now = datetime.now()
    scheduler = AsyncIOScheduler()
    if invterval == 0:
        await channel.delete()
        return
    if delta == "s":
        time = date_now + timedelta(seconds=invterval)
        scheduler.add_job(lol, trigger='cron', second=time.second)
    if delta == "m":
        time = date_now + timedelta(minutes=invterval)
        scheduler.add_job(lol, trigger='cron', minute=time.minute, second=time.second)
    else:
        await channel.delete()
        return
    scheduler.start()
      

async def getclient(memberId):
    cur.execute(f"SELECT status FROM user WHERE discordId = {memberId}")
    record = cur.fetchall()
    if len(record) == 0:
        return(False)
    if record[0][0] == 'ban':
        return(False)
    return(True)


async def checkclient(memberId):
    cur.execute(f"SELECT status FROM user WHERE discordId = {memberId}")
    record = cur.fetchall()
    if len(record) == 0:
        return(False)
    if record[0][0] == 'ban':
        return(False)
    return(True)  


async def getrole(memberId, permmision):
    cur.execute(f"SELECT status FROM user WHERE discordId = {memberId}")
    record = cur.fetchall()
    if len(record) == 0:
        return(False)
    if record[0][0] in permmision:
        return(True)
    return(False)


async def reply(ctx, redgreen, head, text):
    if text in messages:
        text = messages[text]

    if redgreen:
        color = discord.Colour.from_rgb(51, 153, 102)
    else:
        color = discord.Colour.from_rgb(255, 102, 102)
    embed = discord.Embed(
        title = head,
        description = text,
        colour = color
    )
    await ctx.reply(embed=embed)
    return


async def setcard(opponent, card):
    cardlist = ["–û–±—ã—á–Ω–∞—è", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è", "–ó–æ–ª–æ—Ç–∞—è", "–ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è"]
    for i in cardlist:
        if settings[i] == card:
            card = i

    cardlist = ["–û–±—ã—á–Ω–∞—è", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è", "–ó–æ–ª–æ—Ç–∞—è", "–ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è"]
    guild = bot.get_guild(settings['guild'])
    user = guild.get_member(opponent)


    if card not in cardlist:
         return(False)

    if await checkclient(opponent):
        cur.execute(f"SELECT card FROM user WHERE discordId = {opponent}")
        record = cur.fetchall()

        oldrole = discord.utils.get(guild.roles, id = settings[record[0][0]])
        await user.remove_roles(oldrole)

    try:
        cur.execute(f"UPDATE user SET card = '{card}' WHERE discordId = {opponent}")
        con.commit()
    except:
        pass

    role = discord.utils.get(guild.roles, id = settings[card])
    await user.add_roles(role)

    await user.send(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç—É, –µ—ë —Å—Ç–∞—Ç—É—Å ``{card}``")
    await user.send(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞—Ä—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ: *–ò–ù–§–û–†–ú–ê–¶–ò–Ø*")

    return(True)


async def moneylog(sender, getter, text, money):
    guild = bot.get_guild(settings['guild'])
    channel = guild.get_channel(settings['moneylogch'])
    text = messages[text]
    text = f"{sender}, {text} ``{money} alm`` {getter}"
    color = discord.Colour.from_rgb(51, 153, 102)
    embed = discord.Embed(
        title = "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è",
        description = text,
        colour = color
    )
    await channel.send(embed=embed)


async def depositdb():
    print("depositdb start",datetime.now())
    cur.execute("SELECT id, card, money, deposit_Box, deposit_money, discordId FROM user WHERE deposit_box != 0")
    record = cur.fetchall()
    if len(record) == 0:
        return

    cardlist = {
        '–û–±—ã—á–Ω–∞—è': 0, 
        '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è': 5, 
        '–ó–æ–ª–æ—Ç–∞—è': 5, 
        '–ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è': 7
        }

    for i in record:
        id = i[0]
        card = i[1]
        money = i[2]
        depositBox= i[3]
        depositMoney = i[4]
        discordId = i[5]

        percent = cardlist[card]
        percentmoney = round(money/100*percent)
        newDepositMoney = depositMoney+percentmoney

        if newDepositMoney >= 1728*depositBox:
            user = bot.get_user(discordId)
            await user.send("–£ –≤–∞—Å –∑–∞–ø–æ–ª–Ω–∏–ª–∏—Å—å —è—á–µ–π–∫–∏. –ö—É–ø–∏—Ç–µ –Ω–æ–≤—ã–µ!")
            return


        cur.execute(f"UPDATE user SET deposit_money = {newDepositMoney} WHERE id = {id}")
        con.commit()


async def getseller(memberId):
    memberId = await getuserid(memberId)
    cur.execute(f"SELECT id FROM shops WHERE owner = {memberId}")
    record = cur.fetchall()
    if len(record) == 0:
        return(0)
    return(record[0][0])

@bot.remove_command('help') #—É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É help


@slash.slash_command( #–æ–±—Ö–æ–¥
    description = '[owner] react', 
    options = [
        Option("type", description = "type", type=OptionType.STRING, required=True)
    ])   
async def react(ctx, type: str):
    print("–°—Ç–∞—Ä—Ç")
    member = ctx.author
    role = await getrole(member.id, {"owner"})
    if role == False:
        await ctx.send(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")
        return
    if type == "reg":
        message = settings['eregmsg']
        reactionList = ["‚úÖ"]
    elif type == "tp":
        message = settings['emhelpmsg']
        reactionList = ["üí∂", "üí≥", "üè¶" , "üõçÔ∏è", "üõ∏"]
    else:
        return
    message = await ctx.channel.fetch_message(message)
    for i in reactionList:
        await message.add_reaction(i)
    


@slash.slash_command( #–æ–±—Ö–æ–¥
    description = '[owner] –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å', 
    options = [
        Option("opponent", description = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", type=OptionType.USER, required=True),
        Option("role", description = "—Ä–æ–ª—å", type=OptionType.STRING, required=True)
    ])   
async def role(ctx, opponent: discord.Member, role: str):
    member = ctx.author.id
    checkrole = await getrole(member, {"owner"})
    if checkrole == False:
        await reply(ctx, False, "–í—ã–¥–∞—á–∞ —Ä–æ–ª–∏", "notowner")
        return
    cur.execute(f"SELECT status FROM user WHERE discordId = {opponent.id}")
    opRecord = cur.fetchall()
    if len(opRecord) == 0:
        await reply(ctx, False, "–í—ã–¥–∞—á–∞ —Ä–æ–ª–∏", f"{opponent.mention} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º –±–∞–Ω–∫–∞")
        return
    rolelist = ["admin", "tp", "user", "ban"]
    if role not in rolelist:
        await reply(ctx, False, "–í—ã–¥–∞—á–∞ —Ä–æ–ª–∏", f"–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é —Ä–æ–ª—å. –£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞: {rolelist}")
        return
    cur.execute(f"UPDATE user SET status = '{role}' WHERE discordId = {opponent.id}")
    await reply(ctx, True, "–í—ã–¥–∞—á–∞ —Ä–æ–ª–∏", f"–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ä–æ–ª—å ``{role}`` –¥–ª—è {opponent.mention}")
    con.commit()

@slash.slash_command(
    description = '[A] —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É', 
    options = [
        Option("opponent", description = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", type=OptionType.USER, required=True),
        Option("card", description = "—Ä–æ–ª—å", type=OptionType.ROLE, required=True)
    ])   
async def card(ctx, opponent: discord.Member, card: discord.Role):
    member = ctx.author
    role = await getrole(member.id, {"admin", "owner"})
    if role == False:
        await reply(ctx, False, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã", "notrights")
        return

    if await setcard(opponent.id, card) == False:
        await reply(ctx, False, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã", "notcard")
        return
    await reply(ctx, True, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã", "successfully")


@slash.slash_command(
    description = '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏', 
    options = [
        Option("opponent", description = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", type=OptionType.USER, required=True),
        Option("money", description = "–∫–æ–ª-–≤–æ alm", type=OptionType.INTEGER, required=True),
    ])    
async def givemoney(ctx, opponent: discord.Member, money: int): # –°–æ–∑–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞—ë–º –∞—Ä–≥—É–º–µ–Ω—Ç ctx.
    member = ctx.author
    if opponent == member:
        await reply(ctx, False, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–º–∞–∑—ã", "error")
        return

    if await checkclient(member.id) == False:
        await reply(ctx, False, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–º–∞–∑—ã", "notclient")
        return

    cur.execute(f"SELECT money FROM user WHERE discordId = {member.id}")
    record = cur.fetchall()
    if record[0][0] <= money:
        await reply(ctx, False, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–º–∞–∑—ã", "notmoney")
        return
    if 0 >= money:
        await reply(ctx, False, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–º–∞–∑—ã", "error")
        return
    cur.execute(f"SELECT money FROM user WHERE discordId = {opponent.id}")
    opRecord = cur.fetchall()
    if len(opRecord) == 0:
        await reply(ctx, False, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–º–∞–∑—ã", f"{opponent.mention} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º –±–∞–Ω–∫–∞")
        return
    await defsetmoney(opponent.id, opRecord[0][0] + money) #–Ω–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏
    await defsetmoney(member.id, record[0][0] - money) #—Å–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏
    await reply(ctx, True, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–º–∞–∑—ã", f"–í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ {opponent.mention} - ``{money} –∞–ª–º.``")
    await moneylog(member, opponent, 'sendmoney',money)


@slash.slash_command(
    description = '[A] –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏', 
    options = [
        Option("opponent", description = "–Ω–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", type=OptionType.STRING, required=True),
        Option("money", description = "–∫–æ–ª-–≤–æ alm", type=OptionType.INTEGER, required=True),
    ])    
async def sgivemoney(ctx, opponent, money: int): # –°–æ–∑–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞—ë–º –∞—Ä–≥—É–º–µ–Ω—Ç ctx.
    guild = bot.get_guild(927978558528323676)
    opponent = discord.utils.get(guild.members, name = opponent)
    member = ctx.author

    if opponent == member:
        await reply(ctx, False, "–°–∫—Ä—ã—Ç—ã–π –ø–µ—Ä–µ–≤–æ–¥", "error")
        return
    role = await getrole(member.id, {"admin", "owner"})
    if role == False:
        await reply(ctx, False, "–°–∫—Ä—ã—Ç—ã–π –ø–µ—Ä–µ–≤–æ–¥", "notrights")
        return

    cur.execute(f"SELECT money FROM user WHERE discordId = {member.id}")
    record = cur.fetchall()
    if len(record) == 0:
        await reply(ctx, False, "–°–∫—Ä—ã—Ç—ã–π –ø–µ—Ä–µ–≤–æ–¥", "notclient")
        return
    if record[0][0] <= money:
        await reply(ctx, False, "–°–∫—Ä—ã—Ç—ã–π –ø–µ—Ä–µ–≤–æ–¥", "notmoney")
        return
    if 0 >= money:
        await reply(ctx, False, "–°–∫—Ä—ã—Ç—ã–π –ø–µ—Ä–µ–≤–æ–¥", "error")
        return
    cur.execute(f"SELECT money FROM user WHERE discordId = {opponent.id}")
    opRecord = cur.fetchall()
    if len(opRecord) == 0:
        await reply(ctx, False, f"{opponent.mention} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º –±–∞–Ω–∫–∞")
        return
    await defsetmoney(opponent.id, opRecord[0][0] + money) #–Ω–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏
    await defsetmoney(member.id, record[0][0] - money) #—Å–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏
    await reply(ctx, True, f"–í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ {opponent.mention} - ``{money} –∞–ª–º.``") #–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫–æ–ª-–≤–æ –∏ —Å–¥–µ–ª–∞—Ç—å —Å–∫–ª–æ–Ω–µ–Ω–∏–µ
    await moneylog(member, opponent, 'sendmoney',money)


@slash.slash_command(
    description = '[owner] —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏', 
    options = [
        Option("opponent", description = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", type=OptionType.USER, required=True),
        Option("money", description = "–∫–æ–ª-–≤–æ alm", type=OptionType.INTEGER, required=True),
    ])   
async def setmoney(ctx, opponent: discord.Member, money: int):
    member = ctx.author
    cur.execute(f"SELECT money FROM user WHERE discordId = {opponent.id}")
    opRecord = cur.fetchall()
    if len(opRecord) == 0:
        await reply(ctx, False, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–Ω–µ–≥", f"{opponent.mention} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º –±–∞–Ω–∫–∞")
        return
    role = await getrole(member.id, {"owner"})
    if role == False:
        await reply(ctx, False, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–Ω–µ–≥", "notowner")
        return
    await reply(ctx, True, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–Ω–µ–≥", "successfully")
    await defsetmoney(opponent.id, money)
    await moneylog(member, opponent, 'setmoney',money)


@slash.slash_command(
    description = '[A] –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏', 
    options = [
        Option("opponent", description = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", type=OptionType.USER, required=True),
        Option("money", description = "–∫–æ–ª-–≤–æ alm", type=OptionType.INTEGER, required=True),
    ])   
async def addmoney(ctx, opponent: discord.Member, money: int):
    member = ctx.author
    cur.execute(f"SELECT money FROM user WHERE discordId = {opponent.id}")
    opRecord = cur.fetchall()
    if len(opRecord) == 0:
        await reply(ctx, False, "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω–µ–≥", f"{opponent.mention} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º –±–∞–Ω–∫–∞")
        return
    opponentMoney = opRecord[0][0]
    newMoney = opponentMoney + money
    cur.execute(f"SELECT status FROM user WHERE discordId = {member.id}")
    record = cur.fetchall()
    role = record[0][0]
    if role == "tp":
        channel = await createchannel(member, "", "bid", opponent.id, money)
        await member.send(f"–ë—ã–ª —Å–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å ``{channel}`` –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ``{opponent}``")
        embed = discord.Embed(
            title = "–°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
            description = f"{member.mention} —Ö–æ—á–µ—Ç –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ``{opponent}`` –≤ —Ä–∞–∑–º–µ—Ä–µ ``{money} alm``",
            colour = discord.Colour.from_rgb(0, 102, 102)
        )

        await channel.send(embed=embed)
        return
    role = await getrole(member.id, {"admin", "owner"})
    if role == False:
        await reply(ctx, False, "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω–µ–≥", "notrights")
        return

    await defsetmoney(opponent.id, newMoney)
    await reply(ctx, True, "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω–µ–≥", f"–í—ã –¥–∞–ª–∏ ``{money} alm`` –¥–ª—è ``{opponent}``, —Ç–µ–ø–µ—Ä—å –µ–≥–æ —Å—á–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ``{newMoney} alm``")
    await moneylog(member, opponent, 'addmoney',money)


@slash.slash_command(
    description = '[A] —É–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏', 
    options = [
        Option("opponent", description = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", type=OptionType.USER, required=True),
        Option("money", description = "–∫–æ–ª-–≤–æ alm", type=OptionType.INTEGER, required=True),
    ])   
async def removemoney(ctx, opponent: discord.Member, money: int):
    member = ctx.author
    cur.execute(f"SELECT money FROM user WHERE discordId = {opponent.id}")
    opRecord = cur.fetchall()
    if len(opRecord) == 0:
        await reply(ctx, False, "–ó–∞–±—Ä–∞—Ç—å –¥–µ–Ω–µ–≥–∏", f"{opponent.mention} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º –±–∞–Ω–∫–∞")
        return
    opponentMoney = opRecord[0][0]
    newMoney = opponentMoney - money

    cur.execute(f"SELECT status FROM user WHERE discordId = {member.id}")
    record = cur.fetchall()
    role = record[0][0]
    rolelist = ["admin", "owner"]
    if role == "tp":
        await member.send(f"–ë—ã–ª —Å–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {opponent}")
        channel = await createchannel(member, "", "bid", opponent.id, money*-1)
        await channel.send(f"--*–°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*--\n{member.mention} —Ö–æ—á–µ—Ç —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ``{opponent}`` –≤ —Ä–∞–∑–º–µ—Ä–µ ``{money} alm``")
        return

    role = await getrole(member.id, {"admin", "owner"})
    if role == False:
        await reply(ctx, False, "–ó–∞–±—Ä–∞—Ç—å –¥–µ–Ω–µ–≥–∏", "notrights")
        return

    await defsetmoney(opponent.id, newMoney)
    await reply(ctx, True, "–ó–∞–±—Ä–∞—Ç—å –¥–µ–Ω–µ–≥–∏", f"–í—ã –∑–∞–±—Ä–∞–ª–∏ ``{money} alm`` —É ``{opponent}``, —Ç–µ–ø–µ—Ä—å –µ–≥–æ —Å—á–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ``{newMoney} alm``")
    await moneylog(member, opponent, 'removemoney',money)


@slash.slash_command(
    description = '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 
    options = [
        Option("opponent", description = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", type=OptionType.USER, required=False)
    ])    
async def info(ctx):
    member = ctx.author
    if await getclient(member.id) == False:
        await reply(ctx, False, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "notrights")
        return
    cur.execute(f"SELECT id, minecraftNick, money, deposit_Box, deposit_basicMoney, deposit_Money, FROM user WHERE discordId = {member.id}")
    record = cur.fetchall()
    memberid = record[0][0]
    minecraftnick = record[0][1]
    money = record[0][2]
    depositbox = record[0][3]
    depositmoney = record[0][4]+record[0][5]

    embed = discord.Embed(colour=discord.Colour.from_rgb(204, 255, 0),title = f"–ü—Ä–æ—Ñ–∏–ª—å {member}", description = f"ID: {memberid} | –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç –Ω–∏–∫: {minecraftnick}")
    embed.set_footer(text=f"{datetime.now()}")
    embed.set_thumbnail(url=member.avatar_url)
    embed.add_field(name="–ê–ª–º–∞–∑—ã:", value=f"{money}")
    embed.add_field(name="–Ø—á–µ–π–∫–∏ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞:", value=f"{depositbox}")
    embed.add_field(name="–î–µ–Ω—å–≥–∏ –Ω–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–º —Å—á–µ—Ç—É", value=f"{depositmoney}")
    await ctx.reply(embed=embed)


@slash.slash_command(
    description = '[A] –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è', 
    options = [
        Option("opponent", description = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", type=OptionType.USER, required=True)
    ])   
async def ainfo(ctx, opponent: discord.Member):
    member = ctx.author
    role = await getrole(member.id, {"tp", "admin", "owner"})
    if role == False:
        await ctx.reply(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")
        return

    if await checkclient(opponent.id) == False:
        await reply(ctx, False, "AINFO", "error")
        return

    cur.execute(f"SELECT id, minecraftNick, money, deposit_Box, deposit_basicMoney, deposit_Money, dateRegister, card, status FROM user WHERE discordId = {opponent.id}")
    record = cur.fetchall()
    memberid = record[0][0]
    minecraftnick = record[0][1]
    money = record[0][2]
    depositbox = record[0][3]
    depositmoney = record[0][4]+record[0][5]
    dateRegister = record[0][6]
    card = record[0][7]
    role = record[0][8]

    now = datetime.now()
    now = now.strftime("%m/%d/%Y, %H:%M:%S")
    embed = discord.Embed(colour=discord.Colour.from_rgb(204, 255, 0),title = f"–ü—Ä–æ—Ñ–∏–ª—å {opponent}", description = f"ID: {memberid} | –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç –Ω–∏–∫: {minecraftnick}")
    embed.set_footer(text=f"{now} - ainfo –∑–∞–ø—Ä–æ—Å {member}")
    embed.set_thumbnail(url=opponent.avatar_url)
    embed.add_field(name="–ê–ª–º–∞–∑—ã:", value=f"{money}")
    embed.add_field(name="–Ø—á–µ–π–∫–∏ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞:", value=f"{depositbox}")
    embed.add_field(name="–î–µ–Ω—å–≥–∏ –Ω–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–º —Å—á–µ—Ç—É:", value=f"{depositmoney}")
    embed.add_field(name="–ö–∞—Ä—Ç–∞:", value=f"{card}")
    embed.add_field(name="–†–æ–ª—å:", value=f"{role}")
    embed.add_field(name="–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", value=f"{dateRegister}")
    await ctx.reply(embed=embed)


@slash.slash_command(
    description = '–ö—É–ø–∏—Ç—å —è—á–µ–π–∫—É –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞', 
    )   
async def deposit_buy(ctx):
    member = ctx.author
    if await checkclient(member.id) == False:
        await reply(ctx, False, "–ü–æ–∫—É–ø–∫–∞ —è—á–µ–π–∫–∏", "notclient")
        return
    cur.execute(f"SELECT money, deposit_Box FROM user WHERE discordId = {member.id}")
    record = cur.fetchall()
    usermoney = record[0][0]
    depositbox = record[0][1]
    if usermoney < 45:
        await reply(ctx, False, "–ü–æ–∫—É–ø–∫–∞ —è—á–µ–π–∫–∏", "notmoney")
        return
    cur.execute(f"UPDATE user SET deposit_Box = {depositbox} + 1 WHERE discordId = {member.id}")
    cur.execute(f"UPDATE user SET money = {usermoney} - 45 WHERE discordId = {member.id}")
    con.commit()
    await reply(ctx, True, "–ü–æ–∫—É–ø–∫–∞ —è—á–µ–π–∫–∏", "depositbuy")


@slash.slash_command(
    description = '–°–æ–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞', 
    )   
async def deposit_collect(ctx):
    member = ctx.author
    if await checkclient(member.id) == False:
        await reply(ctx, False, "–Ø—á–µ–π–∫–∞", "notclient")
        return

    cur.execute(f"SELECT deposit_Money, money FROM user WHERE discordId = {member.id}")
    record = cur.fetchall()
    depositmoney = record[0][0]
    usermoney = record[0][1]
    if depositmoney <= 0:
        await reply(ctx, False, "–Ø—á–µ–π–∫–∞", "depositnotmoney")
        return
    cur.execute(f"UPDATE user SET deposit_Money = 0 WHERE discordId = {member.id}")
    cur.execute(f"UPDATE user SET money = {usermoney} + {depositmoney} WHERE discordId = {member.id}")
    con.commit()
    await reply(ctx, True, "–Ø—á–µ–π–∫–∞", "depositcollect")


@slash.slash_command(
    description = '[A] –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', 
    options = [
        Option("opponent", description = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", type=OptionType.USER, required=True),
        Option("minecraftnick", description = "–º–∞–π–Ω–∫—Ä–∞—Ñ—Ç –Ω–∏–∫", type=OptionType.STRING, required=True),
        Option("card", description = "–∫–∞—Ä—Ç–∞", type=OptionType.ROLE, required=True),
        Option("depositbox", description = "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫", type=OptionType.INTEGER, required=True),
        Option("money", description = "–∫–æ–ª-–≤–æ alm", type=OptionType.INTEGER, required=True),
    ])   
async def reg(ctx, opponent: discord.Member, minecraftnick: str, card: discord.Role, depositbox: int, money: int):
    member = ctx.author
    guild = bot.get_guild(settings['guild'])
    clientrole = settings['clientrole']
    channelName = str(ctx.channel)
    channelName = channelName.rpartition("-")
    name = channelName[0]
    id = channelName[2]

    role = await getrole(member.id, {"tp", "admin", "owner"})
    if role == False:
        await reply(ctx, False, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "notrights")
        return

    if name != "reg":
        await reply(ctx, False, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "notregch")
        return

    cur.execute(f"SELECT modClosedId FROM tickets WHERE ticketId = '{id}'")
    record = cur.fetchall()
    if record[0][0] != None:
        await reply(ctx, False, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "ticketclose")
        return

    if await setcard(opponent.id, card) == False:
        await reply(ctx, False, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "notcard")
        return

    if await checkclient(opponent.id):
        cur.execute(f"UPDATE tickets SET modClosedId = {member.id} WHERE ticketId = '{id}'")
        con.commit()
        await reply(ctx, False, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "regclose2")
        await reply(ctx, False, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "regclose")
        await reply(ctx, False, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "close2m")
        return

    card = str(guild.get_role(card))
    cur.execute(f"UPDATE tickets SET modClosedId = {member.id} WHERE ticketId = '{id}'")
    cur.execute(f"INSERT INTO user(discordId, minecraftNick, card, deposit_Box, money, dateRegister, status ) VALUES({opponent.id}, '{minecraftnick}', '{card}', {depositbox}, {money}, '{datetime.now().date()}', 'user')")
    con.commit()
    await setcard(opponent.id, card)
    await reply(ctx, True, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "regclose")
    await reply(ctx, True, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "close2m")
    user = guild.get_member(member.id)
    clientrole = guild.get_role(clientrole)
    await user.add_roles(clientrole)
    await deletechannel(ctx.channel, 2, "m")


@slash.slash_command(
    description = '[A] –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å', 
    )   
async def bid(ctx):
    member = ctx.author

    role = await getrole(member.id, {"tp", "admin", "owner"})
    if role == False:
        await reply(ctx, False, "–û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞", "notrights")
        return
    await reply(ctx, True, "–û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞", "successfully")
    await createchannel(member, "", "bid")


@slash.slash_command(
    description = '[A] –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å', 
    )   
async def accept(ctx):
    member = ctx.author
    channelName = str(ctx.channel)
    channelName = channelName.rpartition("-")
    name = channelName[0]
    id = channelName[2]

    role = await getrole(member.id, {"admin", "owner"})
    if role == False:
        await reply(ctx, False, "–ó–∞–ø—Ä–æ—Å", "notrights")
        return

    cur.execute(f"SELECT money, recipient FROM tickets WHERE ticketId = '{id}'")
    record = cur.fetchall()
    if len(record) != 0:
        if record[0][0] != 0:
            cur.execute(f"SELECT discordId, money FROM user WHERE discordId = {record[0][1]}")
            usermoney = cur.fetchall()
            await defsetmoney(usermoney[0][0], usermoney[0][1]+record[0][0])
            getter = bot.get_user(usermoney[0][0])
            await moneylog(member, getter, "acceptmoney", record[0][0])

    cur.execute(f"UPDATE tickets SET type = 'bid-accept' WHERE ticketId = '{id}'")
    con.commit()
    await reply(ctx, True, "–ó–∞–ø—Ä–æ—Å", f"–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ {member.mention}")
    await reply(ctx, True, "–ó–∞–ø—Ä–æ—Å", "close15")
    await deletechannel(ctx.channel, 15, "s")


@slash.slash_command(
    description = '[A] –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å', 
    )   
async def deny(ctx):
    member = ctx.author
    channelName = str(ctx.channel)
    channelName = channelName.rpartition("-")
    name = channelName[0]
    id = channelName[2]

    role = await getrole(member.id, {"admin", "owner"})
    if role == False:
        await reply(ctx, False, "–ó–∞–ø—Ä–æ—Å", "notrights")
        return

    cur.execute(f"UPDATE tickets SET type = 'bid-deny' WHERE ticketId = '{id}'")
    con.commit()
    await reply(ctx, False, "–ó–∞–ø—Ä–æ—Å", f"–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ {member.mention}")
    await reply(ctx, False, "–ó–∞–ø—Ä–æ—Å", "close15")
    await deletechannel(ctx.channel, 15, "s")


@slash.slash_command(
    description = '[A] –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–∫–µ—Ç', 
    )   
async def close(ctx):
    member = ctx.author
    channelName = str(ctx.channel)
    channelName = channelName.rpartition("-")

    role = await getrole(member.id, {"tp","admin", "owner"})
    if role == False:
        await reply(ctx, False, "–¢–∏–∫–∫–µ—Ç", "notrights")
        return

    cur.execute(f"SELECT type FROM tickets WHERE ticketId = {channelName[2]}")
    record = cur.fetchall()
    if len(record) == 0:
        await reply(ctx, False, "–¢–∏–∫–∫–µ—Ç", "error")
        return
    ticktype = record[0][0]

    cur.execute(f"UPDATE tickets SET modClosedId = {member.id} WHERE ticketId = '{channelName[2]}'")
    con.commit()

    await reply(ctx, True, "–¢–∏–∫–∫–µ—Ç", "successfully")
    await deletechannel(ctx.channel, 0, "m")


@slash.slash_command(
    description = '[owner] –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç –∏–º–µ–Ω–Ω–∏ –±–æ—Ç–∞', 
    options = [
        Option("message", description = "—Ç—É—Ç —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç –±–æ—Ç", type=OptionType.STRING, required=True)
    ])   
async def say(ctx, message):
    member = ctx.author
    print(type(ctx.author))
    role = await getrole(member.id, {"owner"})
    if role == False:
        await reply(ctx, False, "say", "notrights")
        return
    channel = bot.get_channel(ctx.channel.id)
    await ctx.channel.send(message)


#shop command

# @slash.slash_command(
#     description = '[owner] –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω', 
#     options = [
#         Option("opponent", description = "–í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞", type=OptionType.USER, required=True),
#         Option("shopname", description = "–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞", type=OptionType.STRING, required=True)
#     ])   
# async def shopreg(ctx, opponent, shopname):
#     role = await getrole(member.id, {"admin", "owner"})
#     if role == False:
#         await reply(ctx, False, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞", "notrights")
#         return
#     print(await getseller(opponent.id))
#     if await getseller(opponent.id) != 0:
#         await reply(ctx, False, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞', 'EROR')
#         return
#     ownerid = await getuserid(opponent.id)
#     cur.execute(f"INSERT INTO shops(owner, name, dateRegister) VALUES({ownerid}, '{shopname}','{datetime.now().date()}')")
#     con.commit()
#     await reply(ctx, True, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞', 'successfully')


# @slash.slash_command(
#     description = '[owner] –ø—Ä–æ—Å–º–æ—Ç—Ä –º–∞–≥–∞–∑–∏–Ω–∞', 
#     options = [
#         Option("shopname", description = "–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞", type=OptionType.STRING, required=True)
#     ])   
# async def shop(ctx, shopname):
#     if await getclient(member.id) == False:
#         await reply(ctx, False, "–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞–≥–∞–∑–∏–Ω–∞", "notrights")
#         return
#     cur.execute(f"SELECT id, owner, dateRegister, rating FROM shops WHERE name = '{shopname}'")
#     record = cur.fetchall()
#     if len(record) == 0:
#         await reply(ctx, False, "–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞–≥–∞–∑–∏–Ω–∞", "–ú–∞–≥–∞–∑–∏–Ω - –Ω–µ –Ω–∞–π–¥–µ–Ω")
#         return
#     await reply(ctx, True, "–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞–≥–∞–∑–∏–Ω–∞", f"{record[0][0:]}")


# @slash.slash_command(
#     description = '[seller] –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω', 
#     options = [
#         Option("product", description = "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", type=OptionType.STRING, required=True),
#         Option("price", description = "–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞", type=OptionType.INTEGER, required=True),
#         Option("ammout", description = "–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ (–ø—Ä–∏–º–µ—Ä: 12 –∏–ª–∏ 6—Å—Ç –∏–ª–∏ 1 —à–∞–ª–∫–µ—Ä)", type=OptionType.STRING, required=True),
#         Option("discription", description = "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", type=OptionType.STRING, required=True)
#     ])   
# async def addtoshop(ctx, shopname):
#     return

#events
@bot.event
async def on_raw_reaction_add(reaction):
    member = reaction.member
    memberObj = bot.get_user(member.id)
    channel = bot.get_channel(reaction.channel_id)
    message = await channel.fetch_message(reaction.message_id)
    user = bot.get_user(reaction.user_id)
    if reaction.message_id == settings['eregmsg']: #–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await message.remove_reaction(reaction.emoji, user)
        cur.execute(f"SELECT discordId FROM user WHERE discordId = {member.id}")
        Record = cur.fetchall()
        if len(Record) != 0:
            return
        cur.execute(f"SELECT ticketId FROM tickets WHERE ownerId = {member.id} AND type = 'reg'")
        twoRecord = cur.fetchall()
        if len(twoRecord) != 0:
            await memberObj.send(f"–í—ã —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é #reg-{twoRecord[0][0]} –µ—Å–ª–∏ –≤—ã —ç—Ç–æ–≥–æ –Ω–µ –¥–µ–ª–∞–ª–∏ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–±–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É")
            return
        await createchannel(member, reaction, "reg")
    if reaction.message_id == settings['emhelpmsg']: #–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∞
            await message.remove_reaction(reaction.emoji, user)
            emoji = str(reaction.emoji)
            if emoji == "üí∂": #–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞
                await createchannel(member, reaction, "alm")
                return
            elif emoji == "üí≥": #–ø–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
                await createchannel(member, reaction, "pkr")
                return
            elif emoji == "üè¶": #–ø–æ–º–æ—â—å –ø–æ –±–∞–Ω–∫—É
                await createchannel(member, reaction, "hbk")
                return
            elif emoji == "üõçÔ∏è": #–ø–æ–º–æ—â—å –ø–æ IMB SALE
                await createchannel(member, reaction, "hsl")
                return
            elif emoji == "üí∞": #—Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞
                await createchannel(member, reaction, "nks")
                return
            elif emoji == "<a:2365peepocookie:919878291442266112>": #–ü–æ—á–µ–º—É IBM group - –Ω–µ –ø–µ—Ä–∞–º–∏–¥–∞? 
                await reaction.member.send("–ú—ã –¢–û–ß–ù–û –Ω–µ –ø–∏—Ä–∞–º–∏–¥–∞, –º—ã —É–∂–µ —ç—Ç–æ –¥–æ–∫–∞–∑–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º SH")
                return
            else:
                await reaction.member.send("–î–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                return


@bot.event
async def on_message(message):
    text_message = message.content.lower()
    text_message = text_message.rpartition(" ")
    if "—Å–∫–∞–º" in text_message:
        await message.channel.send(f"{message.author.mention} —Å–∞–º —Ç—ã —Å–∫–∞–º!")
        await message.author.send(f"{message.author.mention} –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")


@bot.event
async def on_ready():
    print (f"{datetime.now()} Bot ready")
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(depositdb, trigger='cron', day_of_week = 'sun', hour = 0, minute = 1 )
    scheduler.start()


print (f"{datetime.now()} BOT START")
bot.run(settings['token']) #–±–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏ —Å—Ç–∞—Ä—Ç—É–µ–º